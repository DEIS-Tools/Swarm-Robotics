<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.5//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd'>
<nta>
	<declaration>// CONSTANTS and TYPEDEFS

clock global;

const int MAX_STATIONS = #MAX_STATIONS#;
const int OTHER_ROBOTS = #OTHER_ROBOTS#;

typedef int[0, MAX_STATIONS - 1] stations_t;
typedef int[1, OTHER_ROBOTS] other_bots_t;
typedef int[0, OTHER_ROBOTS] bots_t;

int global_work = 0;
bool init_lock = true;

///// CHANNELS //////////
urgent broadcast chan arrival[stations_t][bots_t];
urgent broadcast chan visit[stations_t][bots_t];
broadcast chan initArrival[stations_t][bots_t];
broadcast chan setWork[stations_t];
broadcast chan completed[stations_t][bots_t];
urgent broadcast chan complete;


// Cost function variables
stations_t cur_station = #CUR_STATION#; // #### PLACEHOLDER
bool order[stations_t]  = #CUR_ORDER#; // #### Only the remaining stations are present
bool visited[stations_t];
bool point_touched[stations_t];
double reentry_cost = 0.0;

void update_reentry_cost(stations_t s){
    if(point_touched[s])
    reentry_cost = reentry_cost + 500.0;
}

/////////// GRAPH
// Coordinates of all stations and waypoints.
const double travel_time[MAX_STATIONS][MAX_STATIONS] = #DISTANCE_MATRIX#;  // #### PLACEHOLDER

const bool end_stations[stations_t] = #END_STATIONS#;  // #### PLACEHOLDER



#CODE_COMMENT_START#
const int order_lenghts[other_bots_t] = #OTHER_ORDER_LENGHT#;  // #### PLACEHOLDER
const stations_t start_locs[other_bots_t] = #OTHER_START_LOCS#;  // #### PLACEHOLDER

 // #### PLACEHOLDER
const stations_t other_robots_plans[other_bots_t][MAX_STATIONS] = #OTHER_PLANS#;

 // #### PLACEHOLDER
const bool other_robots_real_orders[other_bots_t][MAX_STATIONS] = #OTHER_ORDERS#;

const double other_robots_distances[other_bots_t] = #OTHER_DISTANCES#;
const bool other_robots_working[other_bots_t] = #OTHER_WORKING#;
const int other_robots_worked_time[other_bots_t] = #OTHER_WORKED#;

#CODE_COMMENT_END#
</declaration>
	<template>
		<name x="5" y="5">Robot</name>
		<declaration>stations_t dest_station = 0;

clock travel;
int max_travel;
int min_travel;
bool finished;

bool is_at_desc(stations_t station){
    return cur_station == station;
}

bool is_done(){
    for(s : stations_t) {
        if(order[s] != visited[s]) {
            return false;
        }
    }

    return true;
}

bool can_go_to(stations_t s){
    if(order[s])
        return true;
    if(is_done() &amp;&amp; end_stations[s])
        return true;
    if(s #GRAPH_BOUND# )
        return true;
    return false;
}

bool must_visit(stations_t station) {
    if (order[station] &amp;&amp; !visited[station])
        return true;
    #REQUIRE_ENDSTATIONS_START#
    if(is_done()){
        return end_stations[station];
    }
    #REQUIRE_ENDSTATIONS_END#
    return false;
}

void update_order(stations_t s){
    if(!must_visit(s)) // Should not be marked as visited when not part of the order.
        return;
    if(!is_done())
        visited[cur_station] = true;
    if(is_done() &amp;&amp; #END_AT_ENDSTATION#)
        finished = true;
}

void init_position(){
    return;
}

int get_max_travel_time(){
    return fint(ceil(travel_time[cur_station][dest_station]));
}

int get_min_travel_time(){
    return fint(floor(travel_time[cur_station][dest_station]));
}

bool is_connected(stations_t station){
    return travel_time[cur_station][station] &gt; 0.0;
}

</declaration>
		<location id="id0" x="212" y="119">
			<name x="170" y="85">Idle</name>
			<committed/>
		</location>
		<location id="id1" x="212" y="-272">
			<name x="195" y="-332">FullSpeed</name>
			<label kind="invariant" x="68" y="-306">travel &lt;= max_travel</label>
		</location>
		<location id="id2" x="535" y="-272">
			<name x="561" y="-289">Dec</name>
			<committed/>
		</location>
		<location id="id3" x="535" y="119">
			<label kind="invariant" x="560" y="119">travel' == 0</label>
		</location>
		<location id="id4" x="68" y="119">
			<name x="9" y="111">Done</name>
		</location>
		<location id="id5" x="212" y="255">
			<committed/>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="552" y="-110">!must_visit(cur_station)</label>
			<label kind="synchronisation" x="569" y="-93">visit[cur_station][0]!</label>
			<nail x="748" y="-272"/>
			<nail x="748" y="59"/>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="assignment" x="-76" y="204">point_touched[cur_station] = true</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="guard" x="102" y="119">finished</label>
			<label kind="synchronisation" x="102" y="136">complete!</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="221" y="-136">s : stations_t</label>
			<label kind="guard" x="221" y="-119">is_connected(s) &amp;&amp;
!finished &amp;&amp;
can_go_to(s)</label>
			<label kind="assignment" x="221" y="-76">dest_station = s,
update_reentry_cost(s),
point_touched[s] = true,
max_travel = get_max_travel_time(),
min_travel = get_min_travel_time()</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="280" y="76">completed[cur_station][0]?</label>
			<label kind="assignment" x="280" y="93">update_order(cur_station)</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="535" y="-229">must_visit(cur_station)</label>
			<label kind="synchronisation" x="535" y="-212">arrival[cur_station][0]!</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="272" y="-306">travel &gt;= min_travel</label>
			<label kind="assignment" x="280" y="-272">travel = 0,
cur_station = dest_station,
dest_station = 0,
max_travel = 0,
min_travel = 0</label>
		</transition>
	</template>
#XML_COMMENT_START#
	<template>
		<name>OtherRobot</name>
		<parameter>const other_bots_t id</parameter>
		<declaration>// Place local declarations here
//stations_t cur_station = 0;
stations_t cur_station = 0;
stations_t dest_station = 0;

bool visited[MAX_STATIONS];

clock travel;
int max_travel;
int min_travel;
bool finished;

// Used for the first min/max travel time if robot is on an edge
bool use_special_time = true;

stations_t get_next_station(){
    int i;
    for(i = 0; i &lt; order_lenghts[id]; i++){
        if (!visited[i])
            return other_robots_plans[id][i];
    }

    // THis would mean it looks for a next station when all is visited.
    assert(false);
    return 0;
}

bool mustWorkAtPoint(){
    int i;

    for(i = 0; i &lt; order_lenghts[id]; i++){
        if(!visited[i]) {
            return cur_station == other_robots_plans[id][i] &amp;&amp; other_robots_real_orders[id][cur_station];
        }
    }

    return false;

}

bool is_done(){
    int i;

    for(i = 0; i &lt; order_lenghts[id]; i++){
        if(!visited[i]) {
            return false;
        }
    }

    return true;
}


void set_visited(){
    int i;

    if(!is_done()){
        for(i = 0; i &lt; order_lenghts[id]; i++){
            if(!visited[i]) {
                visited[i] = true;
                return;
            }
        }
    }
}

void updateFinish(){
    if(is_done())
        finished = true;
}

bool loc_in_order(){
    return other_robots_real_orders[id][cur_station];
}

bool at_next_station(){
    return cur_station == get_next_station();
}

int get_max_travel_time(){
    double dist;

    if (use_special_time){
        dist = other_robots_distances[id];
    }
    else {
        dist = travel_time[cur_station][dest_station];
    }


    return fint(ceil(dist));
}

int get_min_travel_time(){
    double dist;

    if (use_special_time){
        dist = other_robots_distances[id];
    }
    else {
        dist = travel_time[cur_station][dest_station];
    }

    return fint(floor(dist));
}


void setCurrentStation(){
    cur_station = start_locs[id];
}

bool isWorking(){
    return other_robots_working[id];
}

bool isTraveling(){
    return !other_robots_working[id];
}

int getWork(){
    return other_robots_worked_time[id] / 10; // The count is in milliseconds
}</declaration>
		<location id="id6" x="-331" y="-348">
			<committed/>
		</location>
		<location id="id7" x="25" y="-348">
			<name x="8" y="-408">FullSpeed</name>
			<label kind="invariant" x="59" y="-382">travel &lt;= max_travel</label>
		</location>
		<location id="id8" x="-697" y="-25">
			<label kind="invariant" x="-731" y="0">travel' == 0</label>
		</location>
		<location id="id9" x="-331" y="-561">
			<name x="-390" y="-569">Done</name>
		</location>
		<location id="id10" x="-952" y="-238">
			<committed/>
		</location>
		<location id="id11" x="-952" y="-348">
			<committed/>
		</location>
		<location id="id12" x="-952" y="-25">
			<committed/>
		</location>
		<location id="id13" x="25" y="-25">
			<committed/>
		</location>
		<init ref="id11"/>
		<transition controllable="false">
			<source ref="id13"/>
			<target ref="id8"/>
			<label kind="guard" x="-374" y="-76">!mustWorkAtPoint()</label>
			<label kind="synchronisation" x="-374" y="-59">visit[cur_station][id]!</label>
		</transition>
		<transition controllable="false">
			<source ref="id12"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-935" y="-17">setWork[cur_station]!</label>
			<label kind="assignment" x="-935" y="0">global_work = getWork(),
init_lock = true</label>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="guard" x="-943" y="-187">isWorking()</label>
			<label kind="synchronisation" x="-943" y="-161">initArrival[cur_station][id]!</label>
			<label kind="assignment" x="-943" y="-136">init_lock = false</label>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-943" y="-323">init_lock</label>
			<label kind="assignment" x="-943" y="-306">setCurrentStation()</label>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id6"/>
			<label kind="guard" x="-671" y="-289">isTraveling()</label>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="-731" y="-467">!finished &amp;&amp;
at_next_station() &amp;&amp;
!loc_in_order()</label>
			<label kind="assignment" x="-731" y="-408">set_visited(),
updateFinish()</label>
			<nail x="-526" y="-458"/>
			<nail x="-527" y="-357"/>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id9"/>
			<label kind="guard" x="-408" y="-501">finished</label>
			<label kind="synchronisation" x="-408" y="-484">complete!</label>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-306" y="-476">!finished &amp;&amp;
!at_next_station()</label>
			<label kind="assignment" x="-306" y="-433">dest_station = get_next_station(),
max_travel = get_max_travel_time(),
min_travel = get_min_travel_time(),
use_special_time = false</label>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-450" y="-246">completed[cur_station][id]?</label>
			<label kind="assignment" x="-450" y="-229">set_visited(),
updateFinish()</label>
		</transition>
		<transition controllable="false">
			<source ref="id13"/>
			<target ref="id8"/>
			<label kind="guard" x="-374" y="25">mustWorkAtPoint()</label>
			<label kind="synchronisation" x="-374" y="42">arrival[cur_station][id]!</label>
			<nail x="-314" y="17"/>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id13"/>
			<label kind="guard" x="34" y="-289">travel &gt;= min_travel</label>
			<label kind="assignment" x="34" y="-272">travel = 0,
cur_station = dest_station,
dest_station = 0,
max_travel = 0,
min_travel = 0</label>
		</transition>
	</template>
#XML_COMMENT_END#
	<template>
		<name>Station</name>
		<parameter>const stations_t id</parameter>
		<declaration>clock work;


int duration = 0;

bots_t cur_bot = 0;

bots_t queue[bots_t];
bool working[bots_t];
bots_t queue_lenght;
bots_t working_lenght;

void add_to_queue(bots_t b){
    queue[queue_lenght] = b;
    queue_lenght++;
}

void add_working(){
    working[working_lenght] = true;
    working_lenght++;
}

void add_visit(){
    working[working_lenght] = false;
    working_lenght++;
}

bots_t pop_queue(){
    bots_t tmp = queue[0];
    int i;

    for(i = 0; i &lt; (queue_lenght - 1); i++){
        queue[i] = queue[i + 1];
    }
    queue_lenght--;
    queue[queue_lenght] = 0;

    return tmp;
}

int pop_duration(){
    bool tmp = working[0];
    int i;

    for(i = 0; i &lt; (working_lenght - 1); i++){
        working[i] = working[i + 1];
    }
    working_lenght--;
    working[working_lenght] = false;

    return tmp ? 32 : 2;
}
</declaration>
		<location id="id14" x="-85" y="8">
			<name x="-136" y="-25">Free</name>
			<label kind="invariant" x="-153" y="25">work' == 0</label>
		</location>
		<location id="id15" x="272" y="8">
			<name x="255" y="42">Occupied</name>
			<label kind="invariant" x="262" y="25">work &lt;= duration</label>
		</location>
		<location id="id16" x="25" y="-119">
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="select" x="399" y="-34">b : bots_t</label>
			<label kind="synchronisation" x="399" y="-17">visit[id][b]?</label>
			<label kind="assignment" x="399" y="0">add_to_queue(b),
add_visit()</label>
			<nail x="357" y="-17"/>
			<nail x="357" y="8"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="select" x="25" y="8">b : bots_t</label>
			<label kind="synchronisation" x="25" y="25">visit[id][b]?</label>
			<label kind="assignment" x="25" y="42">cur_bot = b,
duration = 2</label>
		</transition>
		<transition controllable="false">
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="42" y="-204">setWork[id]?</label>
			<label kind="assignment" x="42" y="-187">work = global_work,
global_work = 0,
duration = 32</label>
			<nail x="144" y="-119"/>
		</transition>
		<transition controllable="false">
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="select" x="-127" y="-178">b : bots_t</label>
			<label kind="synchronisation" x="-127" y="-161">initArrival[id][b]?</label>
			<label kind="assignment" x="-127" y="-144">cur_bot = b</label>
			<nail x="-85" y="-119"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="select" x="365" y="-119">b : bots_t</label>
			<label kind="synchronisation" x="365" y="-102">arrival[id][b]?</label>
			<label kind="assignment" x="365" y="-85">add_to_queue(b),
add_working()</label>
			<nail x="357" y="-58"/>
			<nail x="357" y="-34"/>
		</transition>
		<transition controllable="false">
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="guard" x="204" y="-263">work == duration &amp;&amp;
queue_lenght &gt; 0</label>
			<label kind="synchronisation" x="204" y="-221">completed[id][cur_bot]!</label>
			<label kind="assignment" x="204" y="-195">work = 0,
cur_bot = pop_queue(),
duration = pop_duration()</label>
			<nail x="187" y="-127"/>
			<nail x="349" y="-127"/>
		</transition>
		<transition controllable="false">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="8" y="102">work == duration &amp;&amp;
queue_lenght == 0</label>
			<label kind="synchronisation" x="8" y="136">completed[id][cur_bot]!</label>
			<label kind="assignment" x="8" y="153">work = 0,
cur_bot = 0,
duration = 0</label>
			<nail x="272" y="102"/>
			<nail x="-85" y="102"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="select" x="17" y="-93">b : bots_t</label>
			<label kind="synchronisation" x="17" y="-76">arrival[id][b]?</label>
			<label kind="assignment" x="17" y="-59">cur_bot = b,
duration = 32</label>
			<nail x="59" y="-17"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Robot, #OTHER_IN_SYSTEM# Station;
//system Robot, Station;
    </system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>strategy plan = minE (global + reentry_cost) [&lt;=#QUERY_TIME#]{
cur_station,
#STATE_VARS#
} -&gt; {
global,
reentry_cost,
#POINT_VARS#
} : &lt;&gt; Robot.Done</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>simulate 1 [&lt;=#SIMULATION#]{
	cur_station
} under plan</formula>
			<comment/>
		</query>
	</queries>
</nta>
